/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ass3;

import java.awt.Component;
import java.awt.Font;
import java.util.*;
import java.io.*;
import javax.swing.event.*;

/**
 *
 * @author kwn961
 */
public class CheckOut extends javax.swing.JFrame
{

    protected ItemTable itemTable;
    
    public CheckOut()
    {
        initComponents();
        
        itemTable = new ItemTable();
        
        
        //Remove all tabs before entering member card
        tabMain.remove(tabBarcode);
        tabMain.remove(tabWeight);
        tabMain.remove(tabCount);
        tabMain.remove(tabFav);
        tabMain.remove(tabPayment);
        tabMain.remove(tabReceipt);
        tabMain.remove(tabAdmin);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        tabMain = new javax.swing.JTabbedPane();
        tabMember = new javax.swing.JPanel();
        labelMember = new javax.swing.JLabel();
        memberInput = new javax.swing.JTextField();
        memberEnter = new javax.swing.JButton();
        labelProceed = new javax.swing.JLabel();
        memberProceed = new javax.swing.JButton();
        labelValidateMember = new javax.swing.JLabel();
        tabBarcode = new javax.swing.JPanel();
        labelBarcode = new javax.swing.JLabel();
        barcodeInput = new javax.swing.JTextField();
        barcodeEnter = new javax.swing.JButton();
        barcodeValidate = new javax.swing.JLabel();
        labelBarcodeRemove = new javax.swing.JLabel();
        barcodeRemove = new javax.swing.JButton();
        labelBarcodeAmount = new javax.swing.JLabel();
        barcodeAmountInput = new javax.swing.JTextField();
        tabWeight = new javax.swing.JTabbedPane();
        tabWeightP = new javax.swing.JPanel();
        weightP1 = new javax.swing.JButton();
        weightP2 = new javax.swing.JButton();
        weightP3 = new javax.swing.JButton();
        weightP4 = new javax.swing.JButton();
        weightP5 = new javax.swing.JButton();
        weightP6 = new javax.swing.JButton();
        weightP7 = new javax.swing.JButton();
        weightP8 = new javax.swing.JButton();
        weightP9 = new javax.swing.JButton();
        weightP10 = new javax.swing.JButton();
        weightP11 = new javax.swing.JButton();
        weightP12 = new javax.swing.JButton();
        labelWeightRemoveP = new javax.swing.JLabel();
        weightRemoveP = new javax.swing.JButton();
        weightValidateP = new javax.swing.JLabel();
        labelWeightAmountP = new javax.swing.JLabel();
        weightAmountInputP = new javax.swing.JTextField();
        tabWeightA = new javax.swing.JPanel();
        weightA1 = new javax.swing.JButton();
        weightA2 = new javax.swing.JButton();
        weightA3 = new javax.swing.JButton();
        weightA4 = new javax.swing.JButton();
        weightA5 = new javax.swing.JButton();
        weightA6 = new javax.swing.JButton();
        weightA7 = new javax.swing.JButton();
        weightA8 = new javax.swing.JButton();
        weightA9 = new javax.swing.JButton();
        weightA10 = new javax.swing.JButton();
        weightA11 = new javax.swing.JButton();
        weightA12 = new javax.swing.JButton();
        labelWeightRemoveA = new javax.swing.JLabel();
        weightRemoveA = new javax.swing.JButton();
        weightValidateA = new javax.swing.JLabel();
        labelWeightAmountA = new javax.swing.JLabel();
        weightAmountInputA = new javax.swing.JTextField();
        tabCount = new javax.swing.JTabbedPane();
        tabCountP = new javax.swing.JPanel();
        countP1 = new javax.swing.JButton();
        countP2 = new javax.swing.JButton();
        countP3 = new javax.swing.JButton();
        countP4 = new javax.swing.JButton();
        countP5 = new javax.swing.JButton();
        countP6 = new javax.swing.JButton();
        countP7 = new javax.swing.JButton();
        countP8 = new javax.swing.JButton();
        countP9 = new javax.swing.JButton();
        countP10 = new javax.swing.JButton();
        countP11 = new javax.swing.JButton();
        countP12 = new javax.swing.JButton();
        labelCountRemoveP = new javax.swing.JLabel();
        countRemoveP = new javax.swing.JButton();
        countValidateP = new javax.swing.JLabel();
        labelCountAmountP = new javax.swing.JLabel();
        countAmountInputP = new javax.swing.JTextField();
        tabCountA = new javax.swing.JPanel();
        countA1 = new javax.swing.JButton();
        countA2 = new javax.swing.JButton();
        countA3 = new javax.swing.JButton();
        countA4 = new javax.swing.JButton();
        countA5 = new javax.swing.JButton();
        countA6 = new javax.swing.JButton();
        countA7 = new javax.swing.JButton();
        countA8 = new javax.swing.JButton();
        countA9 = new javax.swing.JButton();
        countA10 = new javax.swing.JButton();
        countA11 = new javax.swing.JButton();
        countA12 = new javax.swing.JButton();
        labelCountRemoveA = new javax.swing.JLabel();
        countRemoveA = new javax.swing.JButton();
        countValidateA = new javax.swing.JLabel();
        labelCountAmountA = new javax.swing.JLabel();
        countAmountInputA = new javax.swing.JTextField();
        tabFav = new javax.swing.JPanel();
        fav1 = new javax.swing.JButton();
        fav2 = new javax.swing.JButton();
        fav3 = new javax.swing.JButton();
        fav4 = new javax.swing.JButton();
        fav5 = new javax.swing.JButton();
        fav6 = new javax.swing.JButton();
        fav7 = new javax.swing.JButton();
        fav8 = new javax.swing.JButton();
        fav9 = new javax.swing.JButton();
        fav10 = new javax.swing.JButton();
        fav11 = new javax.swing.JButton();
        fav12 = new javax.swing.JButton();
        labelFavRemove = new javax.swing.JLabel();
        favRemove = new javax.swing.JButton();
        favValidate = new javax.swing.JLabel();
        labelFavAmount = new javax.swing.JLabel();
        favAmountInput = new javax.swing.JTextField();
        tabPayment = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        validatePurchase = new javax.swing.JTextArea();
        labelPayment = new javax.swing.JLabel();
        labelPaymentMethod = new javax.swing.JLabel();
        labelPaymentCash = new javax.swing.JLabel();
        labelPaymentCC = new javax.swing.JLabel();
        paymentCash = new javax.swing.JButton();
        ccInput = new javax.swing.JTextField();
        paymentCC = new javax.swing.JButton();
        labelPaymentValidate = new javax.swing.JLabel();
        tabReceipt = new javax.swing.JPanel();
        labelPrintReceipt = new javax.swing.JLabel();
        printReceipt = new javax.swing.JButton();
        labelPrintReceiptA = new javax.swing.JLabel();
        printReceiptA = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        receipt = new javax.swing.JTextArea();
        newPurchase = new javax.swing.JButton();
        tabAuthenticate = new javax.swing.JPanel();
        labelAuthenticate = new javax.swing.JLabel();
        authenticateEnter = new javax.swing.JButton();
        labelValidateMember1 = new javax.swing.JLabel();
        authenticateInput = new javax.swing.JPasswordField();
        labelValidateAuthenticate = new javax.swing.JLabel();
        tabAdmin = new javax.swing.JTabbedPane();
        tabAdminAnalytics = new javax.swing.JPanel();
        labelSales = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salesReport = new javax.swing.JTextArea();
        labelAnalytics = new javax.swing.JLabel();
        labelAnalyticsFilter = new javax.swing.JLabel();
        analyticsInput = new javax.swing.JTextField();
        analyticsEnterFilter = new javax.swing.JButton();
        labelAnalyticsAll = new javax.swing.JLabel();
        analyticsEnterAll = new javax.swing.JButton();
        labelValidateAnalytics = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelAnalyticsReport = new javax.swing.JLabel();
        analyticsReportAlphabetical = new javax.swing.JButton();
        analyticsReportAmount = new javax.swing.JButton();
        analyticsReportValue = new javax.swing.JButton();
        tabAdminCreateCustomer = new javax.swing.JPanel();
        labelCustomer = new javax.swing.JLabel();
        customerFirstNameInput = new javax.swing.JTextField();
        customerCreateEnter = new javax.swing.JButton();
        labelCustomerFirstName = new javax.swing.JLabel();
        labelCustomerLastName = new javax.swing.JLabel();
        customerLastNameInput = new javax.swing.JTextField();
        findCreateEnter = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerDetail = new javax.swing.JTextArea();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelMember.setText("Please enter member number.");

        memberEnter.setText("Enter");
        memberEnter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memberEnterClick(evt);
            }
        });

        labelProceed.setText("Press proceed if not member.");

        memberProceed.setText("Proceed");
        memberProceed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memberProceedClick(evt);
            }
        });

        javax.swing.GroupLayout tabMemberLayout = new javax.swing.GroupLayout(tabMember);
        tabMember.setLayout(tabMemberLayout);
        tabMemberLayout.setHorizontalGroup(
            tabMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMemberLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(tabMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelValidateMember)
                    .addGroup(tabMemberLayout.createSequentialGroup()
                        .addGroup(tabMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelMember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(memberInput)
                            .addComponent(labelProceed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memberEnter)
                            .addComponent(memberProceed)))))
        );
        tabMemberLayout.setVerticalGroup(
            tabMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMemberLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelMember)
                .addGap(18, 18, 18)
                .addGroup(tabMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memberEnter))
                .addGap(18, 18, 18)
                .addComponent(labelValidateMember)
                .addGap(11, 11, 11)
                .addGroup(tabMemberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memberProceed)
                    .addComponent(labelProceed))
                .addContainerGap(369, Short.MAX_VALUE))
        );

        tabMain.addTab("Member", tabMember);

        labelBarcode.setText("Please enter the barcode.");

        barcodeEnter.setText("Enter");
        barcodeEnter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                barcodeEnterClick(evt);
            }
        });

        labelBarcodeRemove.setText("Remove previous item.");

        barcodeRemove.setText("Remove");
        barcodeRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                barcodeRemoveClick(evt);
            }
        });

        labelBarcodeAmount.setText("Optional: Enter amount.");

        javax.swing.GroupLayout tabBarcodeLayout = new javax.swing.GroupLayout(tabBarcode);
        tabBarcode.setLayout(tabBarcodeLayout);
        tabBarcodeLayout.setHorizontalGroup(
            tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBarcodeLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabBarcodeLayout.createSequentialGroup()
                        .addGroup(tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelBarcodeRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelBarcode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(barcodeInput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(barcodeEnter)
                            .addComponent(barcodeRemove))
                        .addGap(43, 43, 43)
                        .addGroup(tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelBarcodeAmount)
                            .addComponent(barcodeAmountInput, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(barcodeValidate, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        tabBarcodeLayout.setVerticalGroup(
            tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBarcodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBarcode)
                    .addComponent(labelBarcodeAmount))
                .addGap(18, 18, 18)
                .addGroup(tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barcodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barcodeEnter)
                    .addComponent(barcodeAmountInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabBarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelBarcodeRemove)
                    .addComponent(barcodeRemove))
                .addGap(18, 18, 18)
                .addComponent(barcodeValidate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(324, Short.MAX_VALUE))
        );

        tabMain.addTab("Barcode", tabBarcode);

        weightP1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP1Click(evt);
            }
        });

        weightP2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP2(evt);
            }
        });

        weightP3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP3(evt);
            }
        });

        weightP4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP4(evt);
            }
        });

        weightP5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP5(evt);
            }
        });

        weightP6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP6(evt);
            }
        });

        weightP7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP7(evt);
            }
        });

        weightP8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP8(evt);
            }
        });

        weightP9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP9(evt);
            }
        });

        weightP10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP10(evt);
            }
        });

        weightP11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP11(evt);
            }
        });

        weightP12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightP12(evt);
            }
        });

        labelWeightRemoveP.setText("Remove previous item.");

        weightRemoveP.setText("Remove");
        weightRemoveP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightRemovePClick(evt);
            }
        });

        labelWeightAmountP.setText("Optional: Enter weight.");

        javax.swing.GroupLayout tabWeightPLayout = new javax.swing.GroupLayout(tabWeightP);
        tabWeightP.setLayout(tabWeightPLayout);
        tabWeightPLayout.setHorizontalGroup(
            tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabWeightPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(weightValidateP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightPLayout.createSequentialGroup()
                        .addComponent(labelWeightRemoveP, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(weightRemoveP))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightPLayout.createSequentialGroup()
                        .addComponent(weightP7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightPLayout.createSequentialGroup()
                        .addComponent(weightP1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightPLayout.createSequentialGroup()
                        .addComponent(weightP4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightPLayout.createSequentialGroup()
                        .addComponent(weightP10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightP12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelWeightAmountP)
                    .addComponent(weightAmountInputP, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        tabWeightPLayout.setVerticalGroup(
            tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabWeightPLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabWeightPLayout.createSequentialGroup()
                        .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(weightP1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(weightP2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(weightP3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelWeightAmountP))
                        .addGap(18, 18, 18)
                        .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weightP4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightP5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightP6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(weightAmountInputP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightP7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightP8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightP9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightP10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightP11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightP12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabWeightPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightRemoveP)
                    .addComponent(labelWeightRemoveP))
                .addGap(18, 18, 18)
                .addComponent(weightValidateP, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        tabWeight.addTab("Popularity", tabWeightP);

        weightA1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA1(evt);
            }
        });

        weightA2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA2(evt);
            }
        });

        weightA3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA3(evt);
            }
        });

        weightA4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA4(evt);
            }
        });

        weightA5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA5(evt);
            }
        });

        weightA6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA6(evt);
            }
        });

        weightA7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA7(evt);
            }
        });

        weightA8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA8(evt);
            }
        });

        weightA9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA9(evt);
            }
        });

        weightA10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA10(evt);
            }
        });

        weightA11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA11(evt);
            }
        });

        weightA12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightA12(evt);
            }
        });

        labelWeightRemoveA.setText("Remove previous item.");

        weightRemoveA.setText("Remove");
        weightRemoveA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightRemoveAClick(evt);
            }
        });

        labelWeightAmountA.setText("Optional: Enter weight.");

        javax.swing.GroupLayout tabWeightALayout = new javax.swing.GroupLayout(tabWeightA);
        tabWeightA.setLayout(tabWeightALayout);
        tabWeightALayout.setHorizontalGroup(
            tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabWeightALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(weightValidateA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightALayout.createSequentialGroup()
                        .addComponent(weightA7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightALayout.createSequentialGroup()
                        .addComponent(weightA1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightALayout.createSequentialGroup()
                        .addComponent(weightA4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightALayout.createSequentialGroup()
                        .addComponent(weightA10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(weightA12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabWeightALayout.createSequentialGroup()
                        .addComponent(labelWeightRemoveA, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(weightRemoveA)))
                .addGap(18, 18, 18)
                .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelWeightAmountA)
                    .addComponent(weightAmountInputA, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        tabWeightALayout.setVerticalGroup(
            tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabWeightALayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabWeightALayout.createSequentialGroup()
                        .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(weightA1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(weightA2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(weightA3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelWeightAmountA))
                        .addGap(18, 18, 18)
                        .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weightA4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightA5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightA6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(weightAmountInputA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightA7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightA8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightA9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightA10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightA11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightA12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabWeightALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightRemoveA)
                    .addComponent(labelWeightRemoveA))
                .addGap(18, 18, 18)
                .addComponent(weightValidateA, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        tabWeight.addTab("Alphabetically", tabWeightA);

        tabMain.addTab("Weighted Item", tabWeight);

        countP1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP1(evt);
            }
        });

        countP2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP2(evt);
            }
        });

        countP3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP3(evt);
            }
        });

        countP4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP4(evt);
            }
        });

        countP5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP5(evt);
            }
        });

        countP6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP6(evt);
            }
        });

        countP7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP7(evt);
            }
        });

        countP8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP8(evt);
            }
        });

        countP9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP9(evt);
            }
        });

        countP10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP10(evt);
            }
        });

        countP11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP11(evt);
            }
        });

        countP12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countP12(evt);
            }
        });

        labelCountRemoveP.setText("Remove previous item.");

        countRemoveP.setText("Remove");
        countRemoveP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countRemovePClick(evt);
            }
        });

        labelCountAmountP.setText("Optional: Enter amount.");

        javax.swing.GroupLayout tabCountPLayout = new javax.swing.GroupLayout(tabCountP);
        tabCountP.setLayout(tabCountPLayout);
        tabCountPLayout.setHorizontalGroup(
            tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCountPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(countValidateP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountPLayout.createSequentialGroup()
                        .addComponent(countP7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountPLayout.createSequentialGroup()
                        .addComponent(countP1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountPLayout.createSequentialGroup()
                        .addComponent(countP4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountPLayout.createSequentialGroup()
                        .addComponent(countP10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countP12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountPLayout.createSequentialGroup()
                        .addComponent(labelCountRemoveP, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(countRemoveP)))
                .addGap(18, 18, 18)
                .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCountAmountP)
                    .addComponent(countAmountInputP, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        tabCountPLayout.setVerticalGroup(
            tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCountPLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCountPLayout.createSequentialGroup()
                        .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(countP1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(countP2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(countP3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelCountAmountP))
                        .addGap(18, 18, 18)
                        .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(countP4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countP5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countP6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(countAmountInputP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countP7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countP8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countP9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countP10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countP11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countP12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCountPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countRemoveP)
                    .addComponent(labelCountRemoveP))
                .addGap(18, 18, 18)
                .addComponent(countValidateP, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        tabCount.addTab("Popularity", tabCountP);

        countA1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA1(evt);
            }
        });

        countA2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA2(evt);
            }
        });

        countA3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA3(evt);
            }
        });

        countA4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA4(evt);
            }
        });

        countA5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA5(evt);
            }
        });

        countA6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA6(evt);
            }
        });

        countA7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA7(evt);
            }
        });

        countA8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA8(evt);
            }
        });

        countA9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA9(evt);
            }
        });

        countA10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA10(evt);
            }
        });

        countA11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA11(evt);
            }
        });

        countA12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countA12(evt);
            }
        });

        labelCountRemoveA.setText("Remove previous item.");

        countRemoveA.setText("Remove");
        countRemoveA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countRemoveAClick(evt);
            }
        });

        labelCountAmountA.setText("Optional: Enter amount.");

        javax.swing.GroupLayout tabCountALayout = new javax.swing.GroupLayout(tabCountA);
        tabCountA.setLayout(tabCountALayout);
        tabCountALayout.setHorizontalGroup(
            tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCountALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(countValidateA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountALayout.createSequentialGroup()
                        .addComponent(countA7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountALayout.createSequentialGroup()
                        .addComponent(countA1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountALayout.createSequentialGroup()
                        .addComponent(countA4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountALayout.createSequentialGroup()
                        .addComponent(countA10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(countA12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabCountALayout.createSequentialGroup()
                        .addComponent(labelCountRemoveA, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(countRemoveA)))
                .addGap(18, 18, 18)
                .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCountAmountA)
                    .addComponent(countAmountInputA, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        tabCountALayout.setVerticalGroup(
            tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCountALayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCountALayout.createSequentialGroup()
                        .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(countA1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(countA2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(countA3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelCountAmountA))
                        .addGap(18, 18, 18)
                        .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(countA4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countA5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countA6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(countAmountInputA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countA7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countA8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countA9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countA10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countA11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countA12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCountALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countRemoveA)
                    .addComponent(labelCountRemoveA))
                .addGap(18, 18, 18)
                .addComponent(countValidateA, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        tabCount.addTab("Alphabetically", tabCountA);

        tabMain.addTab("Counted Item", tabCount);

        fav1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav1(evt);
            }
        });

        fav2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav2(evt);
            }
        });

        fav3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav3(evt);
            }
        });

        fav4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav4(evt);
            }
        });

        fav5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav5(evt);
            }
        });

        fav6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav6(evt);
            }
        });

        fav7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav7(evt);
            }
        });

        fav8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav8(evt);
            }
        });

        fav9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav9(evt);
            }
        });

        fav10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav10(evt);
            }
        });

        fav11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav11(evt);
            }
        });

        fav12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fav12(evt);
            }
        });

        labelFavRemove.setText("Remove previous item.");

        favRemove.setText("Remove");
        favRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                favRemoveClick(evt);
            }
        });

        labelFavAmount.setText("Optional: Enter amount.");

        javax.swing.GroupLayout tabFavLayout = new javax.swing.GroupLayout(tabFav);
        tabFav.setLayout(tabFavLayout);
        tabFavLayout.setHorizontalGroup(
            tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFavLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(favValidate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabFavLayout.createSequentialGroup()
                        .addComponent(fav7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabFavLayout.createSequentialGroup()
                        .addComponent(fav1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabFavLayout.createSequentialGroup()
                        .addComponent(fav4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabFavLayout.createSequentialGroup()
                        .addComponent(fav10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fav12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabFavLayout.createSequentialGroup()
                        .addComponent(labelFavRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(favRemove)))
                .addGap(18, 18, 18)
                .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFavAmount)
                    .addComponent(favAmountInput, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        tabFavLayout.setVerticalGroup(
            tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFavLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabFavLayout.createSequentialGroup()
                        .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fav1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fav2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fav3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelFavAmount))
                        .addGap(18, 18, 18)
                        .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fav4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fav5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fav6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(favAmountInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fav7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fav8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fav9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fav10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fav11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fav12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabFavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(favRemove)
                    .addComponent(labelFavRemove))
                .addGap(18, 18, 18)
                .addComponent(favValidate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
        );

        tabMain.addTab("Favourite", tabFav);

        validatePurchase.setColumns(20);
        validatePurchase.setRows(5);
        jScrollPane6.setViewportView(validatePurchase);

        labelPayment.setText("Please check your purchase below.");

        labelPaymentMethod.setText("Payment method.");

        labelPaymentCash.setText("Press Cash to pay by cash.");

        labelPaymentCC.setText("Enter credit card details.");

        paymentCash.setText("Cash");
        paymentCash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentCashClick(evt);
            }
        });

        paymentCC.setText("Enter");
        paymentCC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentCCClick(evt);
            }
        });
        paymentCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentCCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabPaymentLayout = new javax.swing.GroupLayout(tabPayment);
        tabPayment.setLayout(tabPaymentLayout);
        tabPaymentLayout.setHorizontalGroup(
            tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                    .addGroup(tabPaymentLayout.createSequentialGroup()
                        .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPayment)
                            .addComponent(labelPaymentCC)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabPaymentLayout.createSequentialGroup()
                                .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabPaymentLayout.createSequentialGroup()
                                        .addComponent(labelPaymentCash)
                                        .addGap(38, 38, 38))
                                    .addGroup(tabPaymentLayout.createSequentialGroup()
                                        .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ccInput, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(labelPaymentMethod))
                                        .addGap(46, 46, 46)))
                                .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paymentCC)
                                    .addGroup(tabPaymentLayout.createSequentialGroup()
                                        .addComponent(paymentCash)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelPaymentValidate)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabPaymentLayout.setVerticalGroup(
            tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPayment)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabPaymentLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(labelPaymentValidate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(tabPaymentLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(labelPaymentMethod)
                        .addGap(18, 18, 18)
                        .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPaymentCash)
                            .addComponent(paymentCash))
                        .addGap(18, 18, 18)))
                .addComponent(labelPaymentCC)
                .addGap(18, 18, 18)
                .addGroup(tabPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ccInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paymentCC))
                .addContainerGap())
        );

        tabMain.addTab("Payment", tabPayment);

        labelPrintReceipt.setText("Print receipt in purchase order.");

        printReceipt.setText("Print");
        printReceipt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printReceiptClick(evt);
            }
        });
        printReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReceiptActionPerformed(evt);
            }
        });

        labelPrintReceiptA.setText("Print receipt in alphabetical order.");

        printReceiptA.setText("Print");
        printReceiptA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printReceiptAClick(evt);
            }
        });

        receipt.setColumns(20);
        receipt.setRows(5);
        jScrollPane5.setViewportView(receipt);

        newPurchase.setText("New Purchase");
        newPurchase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newPurchaseClick(evt);
            }
        });

        javax.swing.GroupLayout tabReceiptLayout = new javax.swing.GroupLayout(tabReceipt);
        tabReceipt.setLayout(tabReceiptLayout);
        tabReceiptLayout.setHorizontalGroup(
            tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabReceiptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(tabReceiptLayout.createSequentialGroup()
                        .addGroup(tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabReceiptLayout.createSequentialGroup()
                                .addGroup(tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelPrintReceiptA)
                                    .addComponent(labelPrintReceipt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(printReceipt)
                                    .addComponent(printReceiptA)))
                            .addComponent(newPurchase))
                        .addGap(0, 355, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabReceiptLayout.setVerticalGroup(
            tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabReceiptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrintReceipt)
                    .addComponent(printReceipt))
                .addGap(18, 18, 18)
                .addGroup(tabReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrintReceiptA)
                    .addComponent(printReceiptA))
                .addGap(18, 18, 18)
                .addComponent(newPurchase)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabMain.addTab("Receipt", tabReceipt);

        labelAuthenticate.setText("Please enter password.");

        authenticateEnter.setText("Enter");
        authenticateEnter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                authenticateEnterClick(evt);
            }
        });
        authenticateEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authenticateEnterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabAuthenticateLayout = new javax.swing.GroupLayout(tabAuthenticate);
        tabAuthenticate.setLayout(tabAuthenticateLayout);
        tabAuthenticateLayout.setHorizontalGroup(
            tabAuthenticateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAuthenticateLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(tabAuthenticateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabAuthenticateLayout.createSequentialGroup()
                        .addComponent(labelValidateAuthenticate)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(tabAuthenticateLayout.createSequentialGroup()
                        .addGroup(tabAuthenticateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabAuthenticateLayout.createSequentialGroup()
                                .addGroup(tabAuthenticateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAuthenticate)
                                    .addComponent(authenticateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(authenticateEnter))
                            .addComponent(labelValidateMember1))
                        .addContainerGap(376, Short.MAX_VALUE))))
        );
        tabAuthenticateLayout.setVerticalGroup(
            tabAuthenticateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAuthenticateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelAuthenticate)
                .addGap(18, 18, 18)
                .addGroup(tabAuthenticateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authenticateEnter)
                    .addComponent(authenticateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(labelValidateAuthenticate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelValidateMember1)
                .addContainerGap(403, Short.MAX_VALUE))
        );

        tabMain.addTab("Admin", tabAuthenticate);

        labelSales.setText("Sales report.");

        salesReport.setColumns(20);
        salesReport.setRows(5);
        jScrollPane1.setViewportView(salesReport);

        labelAnalytics.setText("Filter sales by item name.");

        labelAnalyticsFilter.setText("Enter item name.");

        analyticsEnterFilter.setText("Filter");
        analyticsEnterFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyticsEnterFilterClick(evt);
            }
        });
        analyticsEnterFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyticsEnterFilterActionPerformed(evt);
            }
        });

        labelAnalyticsAll.setText("Show full sales history.");

        analyticsEnterAll.setText("Show");
        analyticsEnterAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyticsEnterAllClick(evt);
            }
        });
        analyticsEnterAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyticsEnterAllActionPerformed(evt);
            }
        });

        labelAnalyticsReport.setText("Report sales by order.");

        analyticsReportAlphabetical.setText("Alphabetically");
        analyticsReportAlphabetical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyticsReportAlphabeticalClick(evt);
            }
        });

        analyticsReportAmount.setText("Count/Weight");
        analyticsReportAmount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyticsReportAmountClick(evt);
            }
        });

        analyticsReportValue.setText("Value");
        analyticsReportValue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyticsReportValueClick(evt);
            }
        });

        javax.swing.GroupLayout tabAdminAnalyticsLayout = new javax.swing.GroupLayout(tabAdminAnalytics);
        tabAdminAnalytics.setLayout(tabAdminAnalyticsLayout);
        tabAdminAnalyticsLayout.setHorizontalGroup(
            tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAdminAnalyticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(tabAdminAnalyticsLayout.createSequentialGroup()
                        .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSales)
                            .addComponent(labelValidateAnalytics)
                            .addGroup(tabAdminAnalyticsLayout.createSequentialGroup()
                                .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabAdminAnalyticsLayout.createSequentialGroup()
                                            .addComponent(labelAnalyticsAll)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(analyticsEnterAll))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabAdminAnalyticsLayout.createSequentialGroup()
                                            .addComponent(analyticsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(analyticsEnterFilter)))
                                    .addComponent(labelAnalytics))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addGroup(tabAdminAnalyticsLayout.createSequentialGroup()
                                .addComponent(labelAnalyticsFilter)
                                .addGap(171, 171, 171)
                                .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAnalyticsReport)
                                    .addGroup(tabAdminAnalyticsLayout.createSequentialGroup()
                                        .addComponent(analyticsReportAlphabetical, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(analyticsReportAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(analyticsReportValue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 37, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabAdminAnalyticsLayout.setVerticalGroup(
            tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAdminAnalyticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAnalytics)
                    .addComponent(jLabel2)
                    .addComponent(labelAnalyticsReport))
                .addGap(18, 18, 18)
                .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAnalyticsFilter)
                    .addComponent(analyticsReportAlphabetical, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyticsReportAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyticsReportValue, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analyticsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyticsEnterFilter))
                .addGap(18, 18, 18)
                .addComponent(labelValidateAnalytics)
                .addGap(18, 18, 18)
                .addGroup(tabAdminAnalyticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAnalyticsAll)
                    .addComponent(analyticsEnterAll))
                .addGap(18, 18, 18)
                .addComponent(labelSales)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabAdmin.addTab("Analytics", tabAdminAnalytics);

        labelCustomer.setText("Enter customer name to create new member or find member.");

        customerCreateEnter.setText("Create Member");
        customerCreateEnter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createCustomerClick(evt);
            }
        });
        customerCreateEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerCreateEnterActionPerformed(evt);
            }
        });

        labelCustomerFirstName.setText("First Name");

        labelCustomerLastName.setText("Last Name");

        findCreateEnter.setText("Find Member");
        findCreateEnter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findCustomerClick(evt);
            }
        });
        findCreateEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findCreateEnterActionPerformed(evt);
            }
        });

        customerDetail.setColumns(20);
        customerDetail.setRows(5);
        jScrollPane2.setViewportView(customerDetail);

        javax.swing.GroupLayout tabAdminCreateCustomerLayout = new javax.swing.GroupLayout(tabAdminCreateCustomer);
        tabAdminCreateCustomer.setLayout(tabAdminCreateCustomerLayout);
        tabAdminCreateCustomerLayout.setHorizontalGroup(
            tabAdminCreateCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAdminCreateCustomerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabAdminCreateCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCustomerFirstName)
                    .addGroup(tabAdminCreateCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(customerFirstNameInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelCustomer))
                    .addComponent(labelCustomerLastName)
                    .addComponent(customerLastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tabAdminCreateCustomerLayout.createSequentialGroup()
                        .addComponent(customerCreateEnter)
                        .addGap(18, 18, 18)
                        .addComponent(findCreateEnter))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        tabAdminCreateCustomerLayout.setVerticalGroup(
            tabAdminCreateCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAdminCreateCustomerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelCustomer)
                .addGap(18, 18, 18)
                .addComponent(labelCustomerFirstName)
                .addGap(18, 18, 18)
                .addComponent(customerFirstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelCustomerLastName)
                .addGap(18, 18, 18)
                .addComponent(customerLastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tabAdminCreateCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerCreateEnter)
                    .addComponent(findCreateEnter))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        tabAdmin.addTab("Customer Admin", tabAdminCreateCustomer);

        tabMain.addTab("Admin", tabAdmin);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabMain)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabMain)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fav12(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav12
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav12.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav12.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav12

    private void fav11(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav11
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav11.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav11.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav11

    private void fav10(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav10
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav10.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav10.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav10

    private void fav9(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav9
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav9.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav9.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav9

    private void fav8(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav8
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav8.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav8.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav8

    private void fav7(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav7
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav7.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav7.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav7

    private void fav6(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav6
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav6.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav6.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav6

    private void fav5(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav5
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav5.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav5.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav5

    private void fav4(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav4
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav4.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav4.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav4

    private void fav3(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav3
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav3.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav3.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav3

    private void fav2(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav2
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav2.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav2.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav2

    private void fav1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fav1
        try
        {
            //Add one item
            if (favAmountInput.getText().equals(""))
            {
                itemTable.addFav(fav1.getText(), 1);
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addFav(fav1.getText(), Integer.valueOf(favAmountInput.getText()));
                favAmountInput.setText("");
                favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            favAmountInput.setText("");
            favValidate.setText("Invalid amount.");
        }
    }//GEN-LAST:event_fav1

    private void countA12(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA12
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA12.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA12.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA12

    private void countA11(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA11
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA11.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA11.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA11

    private void countA10(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA10
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA10.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA10.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA10

    private void countA9(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA9
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA9.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA9.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA9

    private void countA8(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA8
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA8.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA8.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA8

    private void countA7(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA7
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA7.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA7.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA7

    private void countA6(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA6
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA6.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA6.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA6

    private void countA5(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA5
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA5.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA5.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA5

    private void countA4(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA4
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA4.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA4.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA4

    private void countA3(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA3
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA3.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA3.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA3

    private void countA2(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA2
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA2.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA2.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA2

    private void countA1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countA1
        try
        {
            //Add one item
            if (countAmountInputA.getText().equals(""))
            {
                itemTable.addCount(countA1.getText(), 1);
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countA1.getText(), Integer.valueOf(countAmountInputA.getText()));
                countAmountInputA.setText("");
                countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputA.setText("");
            countValidateA.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countA1

    private void countP12(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP12
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP12.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP12.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP12

    private void countP11(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP11
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP11.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP11.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP11

    private void countP10(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP10
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP10.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP10.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP10

    private void countP9(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP9
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP9.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP9.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP9

    private void countP8(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP8
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP8.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP8.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP8

    private void countP7(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP7
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP7.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP7.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP7

    private void countP6(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP6
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP6.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP6.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP6

    private void countP5(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP5
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP5.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP5.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP5

    private void countP4(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP4
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP4.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP4.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP4

    private void countP3(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP3
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP3.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP3.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP3

    private void countP2(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP2
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP2.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP2.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP2

    private void countP1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countP1
        try
        {
            //Add one item
            if (countAmountInputP.getText().equals(""))
            {
                itemTable.addCount(countP1.getText(), 1);
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addCount(countP1.getText(), Integer.valueOf(countAmountInputP.getText()));
                countAmountInputP.setText("");
                countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            countAmountInputP.setText("");
            countValidateP.setText("Invalid amount.");
        }
    }//GEN-LAST:event_countP1

    private void weightA12(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA12
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA12.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA12.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA12

    private void weightA11(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA11
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA11.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA11.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA11

    private void weightA10(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA10
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA10.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA10.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA10

    private void weightA9(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA9
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA9.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA9.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA9

    private void weightA8(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA8
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA8.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA8.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA8

    private void weightA7(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA7
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA7.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA7.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA7

    private void weightA6(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA6
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA6.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA6.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA6

    private void weightA5(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA5
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA5.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA5.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA5

    private void weightA4(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA4
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA4.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA4.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA4

    private void weightA3(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA3
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA3.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA3.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA3

    private void weightA2(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA2
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA2.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA2.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA2

    private void weightA1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightA1
        try
        {
            //Add one item
            if (weightAmountInputA.getText().equals(""))
            {
                itemTable.addWeight(weightA1.getText(), 1);
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightA1.getText(), Double.valueOf(weightAmountInputA.getText()));
                weightAmountInputA.setText("");
                weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightAmountInputA.setText("");
            weightValidateA.setText("Invalid weight.");
        }
    }//GEN-LAST:event_weightA1

    private void weightP12(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP12
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP12.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP12.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP12

    private void weightP11(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP11
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP11.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP11.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP11

    private void weightP10(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP10
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP10.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP10.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP10

    private void weightP9(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP9
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP9.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP9.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP9

    private void weightP8(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP8
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP8.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP8.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP8

    private void weightP7(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP7
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP7.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP7.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP7

    private void weightP6(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP6
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP6.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP6.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP6

    private void weightP5(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP5
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP5.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP5.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP5

    private void weightP4(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP4
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP4.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP4.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP4

    private void weightP3(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP3
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP3.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP3.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP3

    private void weightP2(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP2
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP2.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP2.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP2

    private void memberProceedClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memberProceedClick
        //Add tabs
        tabMain.remove(tabMember);
        tabMain.remove(tabAuthenticate);
        tabMain.add(tabBarcode);
        tabMain.add(tabWeight);
        tabMain.add(tabCount);
        tabMain.add(tabPayment);
        tabMain.setTitleAt(0, "Barcoded");
        tabMain.setTitleAt(1, "Weighted");
        tabMain.setTitleAt(2, "Counted");
        tabMain.setTitleAt(3, "Payment");
        
        //Set font for payment
        validatePurchase.setFont(new Font("Monospaced", Font.PLAIN, 12));
        
        //Sort weighted and counted by popularity
        Collections.sort(itemTable.itemTableWeight, Comparator.comparing(ItemTypeWeight::getPopular).reversed());
        Collections.sort(itemTable.itemTableCount, Comparator.comparing(ItemTypeCount::getPopular).reversed());
        
        //Name buttons for weight
        weightP1.setText(itemTable.itemTableWeight.get(0).name);
        weightP2.setText(itemTable.itemTableWeight.get(1).name);
        weightP3.setText(itemTable.itemTableWeight.get(2).name);
        weightP4.setText(itemTable.itemTableWeight.get(3).name);
        weightP5.setText(itemTable.itemTableWeight.get(4).name);
        weightP6.setText(itemTable.itemTableWeight.get(5).name);
        weightP7.setText(itemTable.itemTableWeight.get(6).name);
        weightP8.setText(itemTable.itemTableWeight.get(7).name);
        weightP9.setText(itemTable.itemTableWeight.get(8).name);
        weightP10.setText(itemTable.itemTableWeight.get(9).name);
        weightP11.setText(itemTable.itemTableWeight.get(10).name);
        weightP12.setText(itemTable.itemTableWeight.get(11).name);
        
        //Name buttons for count
        countP1.setText(itemTable.itemTableCount.get(0).name);
        countP2.setText(itemTable.itemTableCount.get(1).name);
        countP3.setText(itemTable.itemTableCount.get(2).name);
        countP4.setText(itemTable.itemTableCount.get(3).name);
        countP5.setText(itemTable.itemTableCount.get(4).name);
        countP6.setText(itemTable.itemTableCount.get(5).name);
        countP7.setText(itemTable.itemTableCount.get(6).name);
        countP8.setText(itemTable.itemTableCount.get(7).name);
        countP9.setText(itemTable.itemTableCount.get(8).name);
        countP10.setText(itemTable.itemTableCount.get(9).name);
        countP11.setText(itemTable.itemTableCount.get(10).name);
        countP12.setText(itemTable.itemTableCount.get(11).name);
        
        //Sort weighted and counted alphabetically
        Collections.sort(itemTable.itemTableWeight);
        Collections.sort(itemTable.itemTableCount);
        
        //Name buttons for weight
        weightA1.setText(itemTable.itemTableWeight.get(0).name);
        weightA2.setText(itemTable.itemTableWeight.get(1).name);
        weightA3.setText(itemTable.itemTableWeight.get(2).name);
        weightA4.setText(itemTable.itemTableWeight.get(3).name);
        weightA5.setText(itemTable.itemTableWeight.get(4).name);
        weightA6.setText(itemTable.itemTableWeight.get(5).name);
        weightA7.setText(itemTable.itemTableWeight.get(6).name);
        weightA8.setText(itemTable.itemTableWeight.get(7).name);
        weightA9.setText(itemTable.itemTableWeight.get(8).name);
        weightA10.setText(itemTable.itemTableWeight.get(9).name);
        weightA11.setText(itemTable.itemTableWeight.get(10).name);
        weightA12.setText(itemTable.itemTableWeight.get(11).name);
        
        //Name buttons for count
        countA1.setText(itemTable.itemTableCount.get(0).name);
        countA2.setText(itemTable.itemTableCount.get(1).name);
        countA3.setText(itemTable.itemTableCount.get(2).name);
        countA4.setText(itemTable.itemTableCount.get(3).name);
        countA5.setText(itemTable.itemTableCount.get(4).name);
        countA6.setText(itemTable.itemTableCount.get(5).name);
        countA7.setText(itemTable.itemTableCount.get(6).name);
        countA8.setText(itemTable.itemTableCount.get(7).name);
        countA9.setText(itemTable.itemTableCount.get(8).name);
        countA10.setText(itemTable.itemTableCount.get(9).name);
        countA11.setText(itemTable.itemTableCount.get(10).name);
        countA12.setText(itemTable.itemTableCount.get(11).name);
    }//GEN-LAST:event_memberProceedClick

    private void memberEnterClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memberEnterClick
        boolean found = false;
        Component component;

        //Search for member
        for (int index = 0; index < itemTable.memberList.size() && !found; index++)
        {
            if (memberInput.getText().equals(itemTable.memberList.get(index).customerId))
            {
                found = true;
                itemTable.member = true;
                itemTable.customerId = memberInput.getText();
                itemTable.customerIndex = index;

                //Add tabs
                tabMain.remove(tabMember);
                tabMain.remove(tabAuthenticate);
                tabMain.add(tabBarcode);
                tabMain.add(tabWeight);
                tabMain.add(tabCount);
                tabMain.add(tabFav);
                tabMain.add(tabPayment);
                tabMain.setTitleAt(0, "Barcoded");
                tabMain.setTitleAt(1, "Weighted");
                tabMain.setTitleAt(2, "Counted");
                tabMain.setTitleAt(3, "Favourite");
                tabMain.setTitleAt(4, "Payment");

                //Set font for payment
                validatePurchase.setFont(new Font("Monospaced", Font.PLAIN, 12));

                //Sort weighted and counted by popularity
                Collections.sort(itemTable.itemTableWeight, Comparator.comparing(ItemTypeWeight::getPopular).reversed());
                Collections.sort(itemTable.itemTableCount, Comparator.comparing(ItemTypeCount::getPopular).reversed());

                //Name buttons for weight
                weightP1.setText(itemTable.itemTableWeight.get(0).name);
                weightP2.setText(itemTable.itemTableWeight.get(1).name);
                weightP3.setText(itemTable.itemTableWeight.get(2).name);
                weightP4.setText(itemTable.itemTableWeight.get(3).name);
                weightP5.setText(itemTable.itemTableWeight.get(4).name);
                weightP6.setText(itemTable.itemTableWeight.get(5).name);
                weightP7.setText(itemTable.itemTableWeight.get(6).name);
                weightP8.setText(itemTable.itemTableWeight.get(7).name);
                weightP9.setText(itemTable.itemTableWeight.get(8).name);
                weightP10.setText(itemTable.itemTableWeight.get(9).name);
                weightP11.setText(itemTable.itemTableWeight.get(10).name);
                weightP12.setText(itemTable.itemTableWeight.get(11).name);

                //Name buttons for count
                countP1.setText(itemTable.itemTableCount.get(0).name);
                countP2.setText(itemTable.itemTableCount.get(1).name);
                countP3.setText(itemTable.itemTableCount.get(2).name);
                countP4.setText(itemTable.itemTableCount.get(3).name);
                countP5.setText(itemTable.itemTableCount.get(4).name);
                countP6.setText(itemTable.itemTableCount.get(5).name);
                countP7.setText(itemTable.itemTableCount.get(6).name);
                countP8.setText(itemTable.itemTableCount.get(7).name);
                countP9.setText(itemTable.itemTableCount.get(8).name);
                countP10.setText(itemTable.itemTableCount.get(9).name);
                countP11.setText(itemTable.itemTableCount.get(10).name);
                countP12.setText(itemTable.itemTableCount.get(11).name);

                //Sort weighted and counted alphabetically
                Collections.sort(itemTable.itemTableWeight);
                Collections.sort(itemTable.itemTableCount);

                //Name buttons for weight
                weightA1.setText(itemTable.itemTableWeight.get(0).name);
                weightA2.setText(itemTable.itemTableWeight.get(1).name);
                weightA3.setText(itemTable.itemTableWeight.get(2).name);
                weightA4.setText(itemTable.itemTableWeight.get(3).name);
                weightA5.setText(itemTable.itemTableWeight.get(4).name);
                weightA6.setText(itemTable.itemTableWeight.get(5).name);
                weightA7.setText(itemTable.itemTableWeight.get(6).name);
                weightA8.setText(itemTable.itemTableWeight.get(7).name);
                weightA9.setText(itemTable.itemTableWeight.get(8).name);
                weightA10.setText(itemTable.itemTableWeight.get(9).name);
                weightA11.setText(itemTable.itemTableWeight.get(10).name);
                weightA12.setText(itemTable.itemTableWeight.get(11).name);

                //Name buttons for count
                countA1.setText(itemTable.itemTableCount.get(0).name);
                countA2.setText(itemTable.itemTableCount.get(1).name);
                countA3.setText(itemTable.itemTableCount.get(2).name);
                countA4.setText(itemTable.itemTableCount.get(3).name);
                countA5.setText(itemTable.itemTableCount.get(4).name);
                countA6.setText(itemTable.itemTableCount.get(5).name);
                countA7.setText(itemTable.itemTableCount.get(6).name);
                countA8.setText(itemTable.itemTableCount.get(7).name);
                countA9.setText(itemTable.itemTableCount.get(8).name);
                countA10.setText(itemTable.itemTableCount.get(9).name);
                countA11.setText(itemTable.itemTableCount.get(10).name);
                countA12.setText(itemTable.itemTableCount.get(11).name);

                //Name buttons for fav
                fav1.setText(itemTable.memberList.get(index).memberItems.get(0).name);
                fav2.setText(itemTable.memberList.get(index).memberItems.get(1).name);
                fav3.setText(itemTable.memberList.get(index).memberItems.get(2).name);
                fav4.setText(itemTable.memberList.get(index).memberItems.get(3).name);
                fav5.setText(itemTable.memberList.get(index).memberItems.get(4).name);
                fav6.setText(itemTable.memberList.get(index).memberItems.get(5).name);
                fav7.setText(itemTable.memberList.get(index).memberItems.get(6).name);
                fav8.setText(itemTable.memberList.get(index).memberItems.get(7).name);
                fav9.setText(itemTable.memberList.get(index).memberItems.get(8).name);
                fav10.setText(itemTable.memberList.get(index).memberItems.get(9).name);
                fav11.setText(itemTable.memberList.get(index).memberItems.get(10).name);
                fav12.setText(itemTable.memberList.get(index).memberItems.get(11).name);
            }
        }
        
        if (!found)
        {
            labelValidateMember.setText("Proceed if not member.");
            memberInput.setText("");
        }
    }//GEN-LAST:event_memberEnterClick

    private void weightP1Click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightP1Click
        try
        {
            //Add one item
            if (weightAmountInputP.getText().equals(""))
            {
                itemTable.addWeight(weightP1.getText(), 1);
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }

            //Add by amount
            else
            {
                itemTable.addWeight(weightP1.getText(), Double.valueOf(weightAmountInputP.getText()));
                weightAmountInputP.setText("");
                weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                validatePurchase.setText(itemTable.printBill());
            }
        }
        
        catch (NumberFormatException exception)
        {
            weightValidateP.setText("Invalid weight.");
            weightAmountInputP.setText("");
        }
    }//GEN-LAST:event_weightP1Click

    private void barcodeEnterClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barcodeEnterClick
        try
        {
            //Add item into bill if found
            if (itemTable.searchBarcode(barcodeInput.getText()))
            {
                //Add one item
                if (barcodeAmountInput.getText().equals(""))
                {
                    itemTable.addBarcode(barcodeInput.getText(), 1);
                    barcodeInput.setText("");
                    barcodeAmountInput.setText("");
                    barcodeValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                    validatePurchase.setText(itemTable.printBill());
                }

                //Add by amount
                else
                {
                    itemTable.addBarcode(barcodeInput.getText(), Integer.valueOf(barcodeAmountInput.getText()));
                    barcodeInput.setText("");
                    barcodeAmountInput.setText("");
                    barcodeValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
                    validatePurchase.setText(itemTable.printBill());
                }
            }

            //Item not found
            else
            {
                barcodeValidate.setText("Invalid barcode.");
                barcodeInput.setText("");
                barcodeAmountInput.setText("");
            }
        }
        
        catch (NumberFormatException exception)
        {
            barcodeValidate.setText("Invalid amount.");
            barcodeInput.setText("");
            barcodeAmountInput.setText("");
        }
    }//GEN-LAST:event_barcodeEnterClick

    private void barcodeRemoveClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barcodeRemoveClick
        barcodeValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
        itemTable.itemCount -= itemTable.purchases.get(itemTable.purchases.size() - 1).getAmount();
        itemTable.purchases.remove(itemTable.purchases.size() - 1);
        validatePurchase.setText(itemTable.printBill());
    }//GEN-LAST:event_barcodeRemoveClick

    private void weightRemoveAClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightRemoveAClick
        weightValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
        itemTable.itemCount -= itemTable.purchases.get(itemTable.purchases.size() - 1).getAmount();
        itemTable.purchases.remove(itemTable.purchases.size() - 1);
        validatePurchase.setText(itemTable.printBill());
    }//GEN-LAST:event_weightRemoveAClick

    private void weightRemovePClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightRemovePClick
        weightValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
        itemTable.itemCount -= itemTable.purchases.get(itemTable.purchases.size() - 1).getAmount();
        itemTable.purchases.remove(itemTable.purchases.size() - 1);
        validatePurchase.setText(itemTable.printBill());
    }//GEN-LAST:event_weightRemovePClick

    private void countRemovePClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countRemovePClick
        countValidateP.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
        itemTable.itemCount -= itemTable.purchases.get(itemTable.purchases.size() - 1).getAmount();
        itemTable.purchases.remove(itemTable.purchases.size() - 1);
        validatePurchase.setText(itemTable.printBill());
    }//GEN-LAST:event_countRemovePClick

    private void countRemoveAClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countRemoveAClick
        countValidateA.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
        itemTable.itemCount -= itemTable.purchases.get(itemTable.purchases.size() - 1).getAmount();
        itemTable.purchases.remove(itemTable.purchases.size() - 1);
        validatePurchase.setText(itemTable.printBill());
    }//GEN-LAST:event_countRemoveAClick

    private void favRemoveClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_favRemoveClick
        favValidate.setText(itemTable.purchases.get(itemTable.purchases.size() - 1).print());
        itemTable.itemCount -= itemTable.purchases.get(itemTable.purchases.size() - 1).getAmount();
        itemTable.purchases.remove(itemTable.purchases.size() - 1);
        validatePurchase.setText(itemTable.printBill());
    }//GEN-LAST:event_favRemoveClick

    private void paymentCashClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentCashClick
        //Add points for members
        itemTable.memberList.get(itemTable.customerIndex).points += (-itemTable.discountFactor * 1000) + (int) itemTable.total + (itemTable.discountFactor * 10);

        //Remove all tabs after paying
        tabMain.remove(tabBarcode);
        tabMain.remove(tabWeight);
        tabMain.remove(tabCount);
        tabMain.remove(tabFav);
        tabMain.remove(tabPayment);
        
        //Print receipt
        tabMain.add(tabReceipt);
        tabMain.setTitleAt(0, "Receipt");
        receipt.setFont(new Font("Monospaced", Font.PLAIN, 12));
        newPurchase.setVisible(false);
        itemTable.printBillFinal();
        
        try
        {

            itemTable.saveData();
            itemTable.saveMembers();
            itemTable.saveLog();
            
            //Increment transaction number
            itemTable.transactionId++;
        }

        catch(Exception e)
        {

        }
    }//GEN-LAST:event_paymentCashClick

    private void printReceiptClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printReceiptClick
        labelPrintReceipt.setVisible(false);
        printReceipt.setVisible(false);
        labelPrintReceiptA.setVisible(false);
        printReceiptA.setVisible(false);
        
        receipt.setText(itemTable.printBillFinal());
        newPurchase.setVisible(true);
    }//GEN-LAST:event_printReceiptClick

    private void printReceiptAClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printReceiptAClick
        labelPrintReceipt.setVisible(false);
        printReceipt.setVisible(false);
        labelPrintReceiptA.setVisible(false);
        printReceiptA.setVisible(false);
        
        Collections.sort(itemTable.purchasesFinal);
        receipt.setText(itemTable.printBillFinal());
        newPurchase.setVisible(true);
    }//GEN-LAST:event_printReceiptAClick

    private void newPurchaseClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newPurchaseClick
        new CheckOut().setVisible(true);
    }//GEN-LAST:event_newPurchaseClick

    private void paymentCCClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentCCClick
        boolean search = false;
        
        for (CreditCard card : itemTable.creditCard)
        {
            if (ccInput.getText().equals(card.num))
            {
                search = true;
                
                if (itemTable.total > card.balance)
                {
                    labelPaymentValidate.setText("Insufficient funds in card.");
                    ccInput.setText("");
                }
                
                else
                {
                    //Add points for members
                    itemTable.memberList.get(itemTable.customerIndex).points += (-itemTable.discountFactor * 1000) + (int) itemTable.total + (itemTable.discountFactor * 10);
                    
                    //Remove all tabs after paying
                    tabMain.remove(tabBarcode);
                    tabMain.remove(tabWeight);
                    tabMain.remove(tabCount);
                    tabMain.remove(tabFav);
                    tabMain.remove(tabPayment);

                    //Print receipt
                    tabMain.add(tabReceipt);
                    tabMain.setTitleAt(0, "Receipt");
                    receipt.setFont(new Font("Monospaced", Font.PLAIN, 12));
                    newPurchase.setVisible(false);
                    
                    try
                    {

                        itemTable.saveData();
                        itemTable.saveMembers();
                        itemTable.saveLog();
                        
                        //Increment transaction number
                        itemTable.transactionId++;
                    }

                    catch(Exception e)
                    {

                    }
                }
            }
        }
        
        if (!search)
            labelPaymentValidate.setText("Invalid card number.");
    }//GEN-LAST:event_paymentCCClick

    private void paymentCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentCCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentCCActionPerformed

    private void analyticsEnterFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyticsEnterFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analyticsEnterFilterActionPerformed

    private void authenticateEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authenticateEnterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authenticateEnterActionPerformed

    private void authenticateEnterClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_authenticateEnterClick
        if (authenticateInput.getText().equals(itemTable.password))
        {
            //Remove member and authenticate
            tabMain.remove(tabMember);
            tabMain.remove(tabAuthenticate);
            
            //Add admin tab
            tabMain.add(tabAdmin);
            tabMain.setTitleAt(0, "Admin");
            
            salesReport.setText(itemTable.readLog());
            itemTable.analytics();
            
            //Set font for report
            salesReport.setFont(new Font("Monospaced", Font.PLAIN, 12));
        }
        
        else
        {
            labelValidateAuthenticate.setText("Invalid password, reenter password or exit admin mode.");
        }
    }//GEN-LAST:event_authenticateEnterClick

    private void analyticsEnterFilterClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyticsEnterFilterClick
        boolean search = false;
        
        //Validate input name for barcoded
        for (int index = 0; index < itemTable.itemTableBarcode.size() && !search; index++)
        {
            if (itemTable.itemTableBarcode.get(index).name.toLowerCase().contains(analyticsInput.getText().toLowerCase()))
                search = true;
        }
        
        //Validate input name for weighted
        for (int index = 0; index < itemTable.itemTableWeight.size() && !search; index++)
        {
            if (itemTable.itemTableWeight.get(index).name.toLowerCase().contains(analyticsInput.getText().toLowerCase()))
                search = true;
        }
        
        //Validate inout name for counted
        for (int index = 0; index < itemTable.itemTableCount.size() && !search; index++)
        {
            if (itemTable.itemTableCount.get(index).name.toLowerCase().contains(analyticsInput.getText().toLowerCase()))
                search = true;
        }
        
        if (search)
        {
            labelValidateAnalytics.setText("");
            salesReport.setText(itemTable.readLog(analyticsInput.getText()));
        }
        
        else
        {
            labelValidateAnalytics.setText("Item name not found, reenter item name.");
        }
    }//GEN-LAST:event_analyticsEnterFilterClick

    private void analyticsEnterAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyticsEnterAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analyticsEnterAllActionPerformed

    private void analyticsReportAlphabeticalClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyticsReportAlphabeticalClick
        salesReport.setText(itemTable.analyticsAlphabetical());
    }//GEN-LAST:event_analyticsReportAlphabeticalClick

    private void analyticsReportAmountClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyticsReportAmountClick
        salesReport.setText(itemTable.analyticsAmount());
    }//GEN-LAST:event_analyticsReportAmountClick

    private void analyticsReportValueClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyticsReportValueClick
        salesReport.setText(itemTable.analyticsValue());
    }//GEN-LAST:event_analyticsReportValueClick

    private void printReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReceiptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_printReceiptActionPerformed

    private void analyticsEnterAllClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyticsEnterAllClick
        salesReport.setText(itemTable.readLog());
    }//GEN-LAST:event_analyticsEnterAllClick

    private void customerCreateEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerCreateEnterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerCreateEnterActionPerformed

    private void createCustomerClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createCustomerClick
        Member tempMember = new Member();
        int tempMemberId = Integer.parseInt(itemTable.memberList.get(itemTable.memberList.size() - 1).customerId) + 1;
        
        tempMember.firstName = customerFirstNameInput.getText();
        tempMember.lastName = customerLastNameInput.getText();
        tempMember.customerId = Integer.toString(tempMemberId);
        
        itemTable.memberList.add(new Member(tempMember));
        
        //Reset input values
        customerFirstNameInput.setText("");
        customerLastNameInput.setText("");
        
        try
        {
            itemTable.saveMembers();
        }
        
        catch (Exception exception)
        {
            exception.printStackTrace();
        }
    }//GEN-LAST:event_createCustomerClick

    private void findCustomerClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findCustomerClick
        String tempStr = "";
        
        for (Member find : itemTable.memberList)
        {
            if (find.firstName.equalsIgnoreCase(customerFirstNameInput.getText()) && find.lastName.equalsIgnoreCase(customerLastNameInput.getText()))
            {
                tempStr += "Customer ID: " + find.customerId + "\n";
                tempStr += "First Name: " + find.firstName + "\n";
                tempStr += "Last Name: " + find.lastName + "\n";
                tempStr += "Points: " + find.points;
            }
        }
        
        customerDetail.setText(tempStr);
    }//GEN-LAST:event_findCustomerClick

    private void findCreateEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findCreateEnterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findCreateEnterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run()
            {
                new CheckOut().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyticsEnterAll;
    private javax.swing.JButton analyticsEnterFilter;
    private javax.swing.JTextField analyticsInput;
    private javax.swing.JButton analyticsReportAlphabetical;
    private javax.swing.JButton analyticsReportAmount;
    private javax.swing.JButton analyticsReportValue;
    private javax.swing.JButton authenticateEnter;
    private javax.swing.JPasswordField authenticateInput;
    private javax.swing.JTextField barcodeAmountInput;
    private javax.swing.JButton barcodeEnter;
    private javax.swing.JTextField barcodeInput;
    private javax.swing.JButton barcodeRemove;
    private javax.swing.JLabel barcodeValidate;
    private javax.swing.JTextField ccInput;
    private javax.swing.JButton countA1;
    private javax.swing.JButton countA10;
    private javax.swing.JButton countA11;
    private javax.swing.JButton countA12;
    private javax.swing.JButton countA2;
    private javax.swing.JButton countA3;
    private javax.swing.JButton countA4;
    private javax.swing.JButton countA5;
    private javax.swing.JButton countA6;
    private javax.swing.JButton countA7;
    private javax.swing.JButton countA8;
    private javax.swing.JButton countA9;
    private javax.swing.JTextField countAmountInputA;
    private javax.swing.JTextField countAmountInputP;
    private javax.swing.JButton countP1;
    private javax.swing.JButton countP10;
    private javax.swing.JButton countP11;
    private javax.swing.JButton countP12;
    private javax.swing.JButton countP2;
    private javax.swing.JButton countP3;
    private javax.swing.JButton countP4;
    private javax.swing.JButton countP5;
    private javax.swing.JButton countP6;
    private javax.swing.JButton countP7;
    private javax.swing.JButton countP8;
    private javax.swing.JButton countP9;
    private javax.swing.JButton countRemoveA;
    private javax.swing.JButton countRemoveP;
    private javax.swing.JLabel countValidateA;
    private javax.swing.JLabel countValidateP;
    private javax.swing.JButton customerCreateEnter;
    private javax.swing.JTextArea customerDetail;
    private javax.swing.JTextField customerFirstNameInput;
    private javax.swing.JTextField customerLastNameInput;
    private javax.swing.JButton fav1;
    private javax.swing.JButton fav10;
    private javax.swing.JButton fav11;
    private javax.swing.JButton fav12;
    private javax.swing.JButton fav2;
    private javax.swing.JButton fav3;
    private javax.swing.JButton fav4;
    private javax.swing.JButton fav5;
    private javax.swing.JButton fav6;
    private javax.swing.JButton fav7;
    private javax.swing.JButton fav8;
    private javax.swing.JButton fav9;
    private javax.swing.JTextField favAmountInput;
    private javax.swing.JButton favRemove;
    private javax.swing.JLabel favValidate;
    private javax.swing.JButton findCreateEnter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelAnalytics;
    private javax.swing.JLabel labelAnalyticsAll;
    private javax.swing.JLabel labelAnalyticsFilter;
    private javax.swing.JLabel labelAnalyticsReport;
    private javax.swing.JLabel labelAuthenticate;
    private javax.swing.JLabel labelBarcode;
    private javax.swing.JLabel labelBarcodeAmount;
    private javax.swing.JLabel labelBarcodeRemove;
    private javax.swing.JLabel labelCountAmountA;
    private javax.swing.JLabel labelCountAmountP;
    private javax.swing.JLabel labelCountRemoveA;
    private javax.swing.JLabel labelCountRemoveP;
    private javax.swing.JLabel labelCustomer;
    private javax.swing.JLabel labelCustomerFirstName;
    private javax.swing.JLabel labelCustomerLastName;
    private javax.swing.JLabel labelFavAmount;
    private javax.swing.JLabel labelFavRemove;
    private javax.swing.JLabel labelMember;
    private javax.swing.JLabel labelPayment;
    private javax.swing.JLabel labelPaymentCC;
    private javax.swing.JLabel labelPaymentCash;
    private javax.swing.JLabel labelPaymentMethod;
    private javax.swing.JLabel labelPaymentValidate;
    private javax.swing.JLabel labelPrintReceipt;
    private javax.swing.JLabel labelPrintReceiptA;
    private javax.swing.JLabel labelProceed;
    private javax.swing.JLabel labelSales;
    private javax.swing.JLabel labelValidateAnalytics;
    private javax.swing.JLabel labelValidateAuthenticate;
    private javax.swing.JLabel labelValidateMember;
    private javax.swing.JLabel labelValidateMember1;
    private javax.swing.JLabel labelWeightAmountA;
    private javax.swing.JLabel labelWeightAmountP;
    private javax.swing.JLabel labelWeightRemoveA;
    private javax.swing.JLabel labelWeightRemoveP;
    private javax.swing.JButton memberEnter;
    private javax.swing.JTextField memberInput;
    private javax.swing.JButton memberProceed;
    private javax.swing.JButton newPurchase;
    private javax.swing.JButton paymentCC;
    private javax.swing.JButton paymentCash;
    private javax.swing.JButton printReceipt;
    private javax.swing.JButton printReceiptA;
    private javax.swing.JTextArea receipt;
    private javax.swing.JTextArea salesReport;
    private javax.swing.JTabbedPane tabAdmin;
    private javax.swing.JPanel tabAdminAnalytics;
    private javax.swing.JPanel tabAdminCreateCustomer;
    private javax.swing.JPanel tabAuthenticate;
    private javax.swing.JPanel tabBarcode;
    private javax.swing.JTabbedPane tabCount;
    private javax.swing.JPanel tabCountA;
    private javax.swing.JPanel tabCountP;
    private javax.swing.JPanel tabFav;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JPanel tabMember;
    private javax.swing.JPanel tabPayment;
    private javax.swing.JPanel tabReceipt;
    private javax.swing.JTabbedPane tabWeight;
    private javax.swing.JPanel tabWeightA;
    private javax.swing.JPanel tabWeightP;
    private javax.swing.JTextArea validatePurchase;
    private javax.swing.JButton weightA1;
    private javax.swing.JButton weightA10;
    private javax.swing.JButton weightA11;
    private javax.swing.JButton weightA12;
    private javax.swing.JButton weightA2;
    private javax.swing.JButton weightA3;
    private javax.swing.JButton weightA4;
    private javax.swing.JButton weightA5;
    private javax.swing.JButton weightA6;
    private javax.swing.JButton weightA7;
    private javax.swing.JButton weightA8;
    private javax.swing.JButton weightA9;
    private javax.swing.JTextField weightAmountInputA;
    private javax.swing.JTextField weightAmountInputP;
    private javax.swing.JButton weightP1;
    private javax.swing.JButton weightP10;
    private javax.swing.JButton weightP11;
    private javax.swing.JButton weightP12;
    private javax.swing.JButton weightP2;
    private javax.swing.JButton weightP3;
    private javax.swing.JButton weightP4;
    private javax.swing.JButton weightP5;
    private javax.swing.JButton weightP6;
    private javax.swing.JButton weightP7;
    private javax.swing.JButton weightP8;
    private javax.swing.JButton weightP9;
    private javax.swing.JButton weightRemoveA;
    private javax.swing.JButton weightRemoveP;
    private javax.swing.JLabel weightValidateA;
    private javax.swing.JLabel weightValidateP;
    // End of variables declaration//GEN-END:variables
}
